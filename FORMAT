COptimizedObs is an audio container used in Ã¢ge's rUGP engine.
The "reference implementation" of the format is the riooor.rpo
plugin file distributed with many titles based on rUGP.

COptimizedObs is based on Ogg Vorbis. The audio stream is 100%
compatible with Vorbis. The encapsulation format is a heavily
modified version of Ogg, similar in high-level structure but
more tightly packed than regular Ogg and without the packet
segmentation scheme employed in Ogg.

Page header
-----------

All variants of the header begin with a 2-bit version and 4-bit
flags. Flags are, in order: continued (1000), partial (0100),
bos (0010) and eos (0001).

If the `continued` flag is set, the first packet on this page is
fragmented and needs to be merged with the last packet from the
previous page in order to be fully parseable. This is analogous to
the Ogg 0x01 bitflag.

If the `partial` flag is set, the last packet on this page is not
complete and needs to be merged with the first packet from the
next page in order to be fully parseable.
Unlike Ogg, last packet length doesn't have to be equal to 255 in
order for this flag to be set.

If the `bos` flag is set, this page is the first page in the stream.
This is analogous to the Ogg 0x02 bitflag.

If the `eos` flag is set, this page is the last page in the stream.
This is analogous to the Ogg 0x04 bitflag.

Pictured:

 0 1 2 3 4 5  bits
+-+-+-+-+-+-+
|ver|c|p|b|e|
+-+-+-+-+-+-+

If the version is 1 or later, flags are followed by the 64-bit
granule position, padded to the next byte.

0               1               2               3               4 bytes
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|ver|c|p|b|e|   |                                               |
+-+-+-+-+-+-+-+-+                                               +
|                           granulepos                          |
+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               |0 0|0|0|0|0|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The zeroed 6 bits are presumably left here to make byte-oriented
parsing easier - with the 6-bit padding the rest of the page has
the same bit alignment regardless of the header version so it's
possible to read version, flags, granule position if present,
and use v0 page parsing code for the rest of the fields.

Page headers come in 4 variants. Fixed bits (hardcoded 1/0s)
determine which variant the header belongs to.

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |1|               |l s|                                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Hardcoded values in this variant:
  lsize            = 0
  packet count     = 1
  base packet size = 3 if l s == 3 else 2
  base header size = 6

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |0| | lsize | | packet count  |0 0|                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Hardcoded values in this variant:
  base packet size = 0
  base header size = 21


 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |0| | lsize | | packet count  |0 1|base packet siz|     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Hardcoded values in this variant:
  base header size = 29

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       |0| | lsize | | packet count  |1 0|   base packet size  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Hardcoded values in this variant:
  base header size = 32

Variable packet lengths are `lsize`-bit long and are placed immediately
after the the "base header", the length of which is defined by `base
header size`. There are `packet count` lengths. To get complete packet
lengths add `base packet size` to each length.

Total page size is the sum of all packet lengths and `base header size`.
